<?php
require_once(dirname(__FILE__).'/../include.php');

$c = new ConstantHandler();
$c->define('UPLOAD_PICTURE');	// Update Profile
$c->define('UPLOAD_NOTICE', 'UPLOAD_NOTES', 'UPLOAD_ASSIGNMENT');	// Add Notes/Notice/Assignments
$c->define('UPLOAD_PAPER');	// Exam Papers
/**
 * FileHandler Class
 */
class FileHandler extends ErrorHandler {
	/** @var int Constants with 'UPLOAD_' as prefix */
	private $type;
	/** @var string Upload Directory */
	private $dir;
	/** @var string Prefix(AutoGenerated) */
	private $prefix;

	/**
	 * Creates nested DIR and changes the DIR variable to point there.
	 * @method deepDIR
	 * @param  array  $arrayDir Array Containing NestedDIR Names(in sequence)
	 * @param bool $makeDir To create directory or not.
	 * @return bool true, if directory exists, else false.
	 */
	public function deepDIR($arrayDir, $makeDir = true) {
		for ($i = 0; $i < count($arrayDir); $i++) {
			$this->dir .= $arrayDir[$i]. "/";
		}
		if (!is_dir($this->dir)) {
			if ($makeDir) {
				mkdir($this->dir, 0777, true);	// Creates the DIR
				return true;
			}
			return false;
		}
		return true;
	}

	/**
	 * Constructor, Initiates Directory and Prefix according to $type
	 * @method __construct
	 * @param  int      $type Type of Upload(Picture/Etc).
	 */
	public function __construct($type) {
		$this->type = $type;
		switch($this->type) {
			case UPLOAD_PICTURE:
				$this->dir = dirname(__FILE__).'/../uploads/picture/';
				$this->prefix = "pic_";
				break;
			case UPLOAD_NOTICE:	// Constant to recognize the type
				$this->dir = dirname(__FILE__).'/../uploads/notice/';	// Directory where the files will be uploaded
				$this->prefix = "notice_";	// Prefix given to each file
				break;
			case UPLOAD_NOTES:
				$this->dir = dirname(__FILE__).'/../uploads/notes/';
				$this->prefix = "notes_";
				break;
			case UPLOAD_ASSIGNMENT:
				$this->dir = dirname(__FILE__).'/../uploads/assignment/';
				$this->prefix = "assignment_";
				break;
			case UPLOAD_PAPER:
				$this->dir = dirname(__FILE__).'/../uploads/papers/';
				$this->prefix = "paper_";
				break;
			default:
				throw new Exception("Invalid Type $type");
		}
	}

	/**
	 * Uploads the $file_contents to the DIR_PREFIX_UserID.png
	 * @method upload
	 * @param  string $file_contents File Contents
	 * @param string $ext Extension of file(default: .png)
	 * @param  integer $userId        User ID
	 * @todo Use move() instead of file_put_contents
	 */
	public function upload($file_contents, $userId, $ext = '.png') {
		if ($userId != NULL) {
			file_put_contents($this->dir . $this->prefix . $userId . $ext, $file_contents);
		}
		/**
		 * @todo Error if file is not uploaded.
		 */
	}

	/**
	 * Generates File Name with Directory.
	 * @method getFullFileName
	 * @param  string      $fileName Full File Name including extension
	 * @return string                File Name with Directory.
	 */
	public function getFullFileName($fileName) {
		$fileDir = $this->dir . $fileName;
		return $fileDir;
	}

	/**
	 * Returns the FileName that would be uploaded.
	 * @method getFileName
	 * @param  integer      $userId UserID
	 * @param  string      $ext    [description]
	 * @return [type]              [description]
	 */
	public function getFileName($userId, $ext = '.png') {
		$fileName = $this->prefix . $userId . $ext;
		return $fileName;
	}

	/**
	 * Checks if file exists or not
	 * @method fileExistByName
	 * @param  string     $fileName Full File Name including extension
	 * @return bool               true if file exists, else false.
	 */
	public function fileExistByName($fileName) {
		$fileDir = $this->dir . $fileName;
		if (file_exists($fileDir)) {
			return true;
		}
		return false;
	}

	/**
	 * Checks if File to be uploaded Exists or Not.
	 * @method fileExists
	 * @param  integer     $userId UserID
	 * @param  string     $ext    Extension of File
	 * @return bool             true if file exists
	 */
	public function fileExists($userId, $ext = '.png') {
		$fileName = $this->dir . $this->getFileName($userId, $ext);
		if (file_exists($fileName)) {
			return true;
		}
		return false;
	}

	/**
	 * Get's the Content of File.
	 * @method get
	 * @param  integer $userId UserID
	 * @param string $ext Extension of file(default: .png)
	 * @return string         Contents of FILE, else NULL.
	 */
	public function get($userId, $ext = '.png') {
		$fileName = $this->dir . $this->getFileName($userId, $ext);
		if ($userId != NULL && file_exists($fileName)) {
			return file_get_contents($fileName);
		}
		return NULL;
	}

	/**
	 * Counts number of files inside directory
	 * @method count
	 * @param  string $ext extension of file
	 * @return integer      Number of files inside directory
	 */
	public function count($ext = '.png') {
		$files = glob($this->dir . '*'. $ext);
		if ($files !== false) {
			$filecount = count($files);
			return $filecount;
		}
		return 0;
	}

	/**
	 * Removes All Files inside directory(with matching extension)
	 * @method remove
	 * @param  string $ext Extension of File.
	 * @return bool      true
	 */
	public function remove($ext = '.png') {
		$files = glob($this->dir . '*'. $ext);
		if ($files !== false) {
			foreach ($files as $file) {
				if (is_file($file)) {
					unlink($file);
				}
			}
		}
		return true;
	}

	/**
	 * Removes A Specific File.
	 * @method removeByName
	 * @param  string $fileName Name of File
	 * @return bool      true, if passed, else false
	 */
	public function removeByName($fileName) {
		$fileLoc = $this->dir . $fileName;

		if ($this->fileExistByName($fileName)) {
			if (is_file($fileLoc)) {
				unlink($fileLoc);
				return true;
			}
		}
		return false;
	}
}
?>